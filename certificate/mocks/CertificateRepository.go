// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	entity "digital-signature/entity"

	mock "github.com/stretchr/testify/mock"
)

// CertificateRepository is an autogenerated mock type for the CertificateRepository type
type CertificateRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *CertificateRepository) Delete(_a0 *entity.Certificate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Certificate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *CertificateRepository) Find(id uint) (*entity.Certificate, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Certificate, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Certificate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *CertificateRepository) Save(_a0 *entity.Certificate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Certificate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *CertificateRepository) Update(_a0 *entity.Certificate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Certificate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCertificateRepository creates a new instance of CertificateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateRepository {
	mock := &CertificateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
