// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	entity "digital-signature/entity"

	mock "github.com/stretchr/testify/mock"
)

// DocumentRepository is an autogenerated mock type for the DocumentRepository type
type DocumentRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *DocumentRepository) Find(id uint) (*entity.Document, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Document, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Document); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: Document
func (_m *DocumentRepository) Save(Document *entity.Document) error {
	ret := _m.Called(Document)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Document) error); ok {
		r0 = rf(Document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDocumentRepository creates a new instance of DocumentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentRepository {
	mock := &DocumentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
